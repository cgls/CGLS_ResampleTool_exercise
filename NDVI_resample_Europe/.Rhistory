#cropping to Europe
dmp_1km_orig_Eur <- crop(dmp_1km_orig, my_extent)
dmp1km_rstr <- dmp_1km_orig_Eur
cuttoff_NA_err <- 327.669993  # everything > cuttoff_NA_err, must be removed for the calculations
cuttoff_NA_err <- 327.6700000001  # everything > cuttoff_NA_err, must be removed for the calculations
cuttoff_NA_err_min <- -0.00000001  # everything <= cuttoff_NA_err_min, must be removed for the calculations
# 1km product
dmp1km_rstr[dmp1km_rstr > cuttoff_NA_err] <- NA   # setting to NA
dmp1km_rstr[dmp1km_rstr < cuttoff_NA_err_min] <- NA   # setting to NA
r300m_resampled1km_Aggr <- raster('r300m_resampled1km_Aggr.tif')
#r300m_resampled1km_Aggr <- raster('r300m_resampled1km_Aggr.tif')
r300m_resampled1km_Aggr
# Plotting correlation (scatterplot)
perc_subsample <- 1   # percentage of points for plotting
## Comparison 'original-1km' with '300m-resampled-1km-QGIS_Aggr' ####
qgis_resamp_europe_avrge <- paste0(path2data, "/QGIS_CGLT/dmp.tif")
qgis_resamp_europe_avrge <- raster(qgis_resamp_europe_avrge)
qgis_extent <- extent(qgis_resamp_europe_avrge)
qgis_resamp_europe_avrge
# Checking correspondence with 1km PROBA-V products
# The following vectors contain Long and Lat coordinates, respectively, of the 1km grid (cell boundaries):
x_ext <- seq((-180 - ((1 / 112) / 2)), 180, (1/112))
y_ext <- seq((80 + ((1 / 112) / 2)), - 60, - (1/112))
if(all(round(qgis_extent[1], 7) %in% round(x_ext, 7) &
round(qgis_extent[2], 7) %in% round(x_ext, 7) &
round(qgis_extent[3], 7) %in% round(y_ext, 7) &
round(qgis_extent[4], 7) %in% round(y_ext, 7))){
print("qgis_resamp_europe_avrge extent matches PROBA-V products")
}else{
stop("qgis_resamp_europe_avrge extent does NOT match PROBA-V products!!!")
}
# Cropping 'qgis_resamp_europe_avrge'
qgis_resamp_europe_avrge <- crop(qgis_resamp_europe_avrge, my_extent)
qgis_resamp_europe_avrge
if(all(round(extent(qgis_resamp_europe_avrge)[1], 7) %in% round(x_ext, 7) &
round(extent(qgis_resamp_europe_avrge)[2], 7) %in% round(x_ext, 7) &
round(extent(qgis_resamp_europe_avrge)[3], 7) %in% round(y_ext, 7) &
round(extent(qgis_resamp_europe_avrge)[4], 7) %in% round(y_ext, 7))){
print("qgis_resamp_europe_avrge extent matches PROBA-V products")
}else{
stop("qgis_resamp_europe_avrge extent does NOT match PROBA-V products!!!")
}
comp_results
load(paste0(path2save, "/ResampleResults_dmp_europe_4Report_May19.RData"), verbose = TRUE)
comp_results
comp_results[2, 1] <- "orig-1km__resampl-1km-QGIS-Aggreg"
rsmpl_df <- data.frame(getValues(dmp1km_rstr), getValues(qgis_resamp_europe_avrge))
rsmpl_df <- rsmpl_df[complete.cases(rsmpl_df), 1:2]
# Pearson's correlation coefficient
rsmpl_df_pearson <- cor(rsmpl_df, method = "pearson")[2, 1]
comp_results[2, 2] <- rsmpl_df_pearson
# Plotting correlation (scatterplot)
#perc_subsample <- 1   # percentage of points for plotting
num_subsample <- round((nrow(rsmpl_df) * perc_subsample / 100), 0)
rsmpl_df_subsample <- rsmpl_df[sample(nrow(rsmpl_df), num_subsample), ]
jpeg(paste0(path2save, "/resample_correlation_QGISAggr.jpg"))
xyplot(rsmpl_df_subsample$getValues.qgis_resamp_europe_avrge. ~ rsmpl_df_subsample$getValues.dmp1km_rstr.,
type = c("p", "r"),
col.line = "red",
xlab = "1km original DMP product",
ylab = "1km resampled DMP image (QGIS)",
main = paste0("Pearson's r = ", as.character(round(rsmpl_df_pearson, 4))),
sub = paste0("Plotting a random subsample of ", num_subsample, " (", perc_subsample, "%) points")
)
dev.off()
# Calculating differences (errors)
rsmpl_df$diff <- abs(rsmpl_df$getValues.dmp1km_rstr. - rsmpl_df$getValues.qgis_resamp_europe_avrge.)
rsmpl_df$diff1 <- abs(round(rsmpl_df$getValues.dmp1km_rstr., 1) - round(rsmpl_df$getValues.qgis_resamp_europe_avrge., 1))
# Root Mean Square Error (RMSE; the lower, the better)
# In GIS, the RMSD is one measure used to assess the accuracy of spatial analysis and remote sensing.
rmse <- sqrt(mean((rsmpl_df$diff)^2))
comp_results[2, 3] <- rmse
# Mean Absolute Error (MAE; the lower, the better)
mae <- mean(rsmpl_df$diff)
comp_results[2, 4] <- mae
# plotting original-1km + resampled-1km
jpeg(paste0(path2save, "/dmp1km_1kmResampled_QGISAggr.jpg"),
width = 22, height = 14, units = "cm", res = 300)
par(mfrow = c(1, 2), mar = c(4, 4, 4, 5))
plot(dmp1km_rstr, main = "DMP 1km (original)")
plot(qgis_resamp_europe_avrge, main = "DMP 1km (resampled)")
dev.off()
## Comparison '300m-resampled-1km-R_Aggr' with '300m-resampled-1km-QGIS_Aggr' ####
comp_results[3, 1] <- "resampl-1km-R-Aggreg__resampl-1km-QGIS-Aggreg"
rsmpl_df <- data.frame(getValues(r300m_resampled1km_Aggr), getValues(qgis_resamp_europe_avrge))
rsmpl_df <- rsmpl_df[complete.cases(rsmpl_df), 1:2]
# Pearson's correlation coefficient
rsmpl_df_pearson <- cor(rsmpl_df, method = "pearson")[2, 1]
comp_results[3, 2] <- rsmpl_df_pearson
# Plotting correlation (scatterplot)
#perc_subsample <- 1   # percentage of points for plotting
num_subsample <- round((nrow(rsmpl_df) * perc_subsample / 100), 0)
rsmpl_df_subsample <- rsmpl_df[sample(nrow(rsmpl_df), num_subsample), ]
jpeg(paste0(path2save, "/resample_correlation_R_QGIS_Aggr.jpg"))
xyplot(rsmpl_df_subsample$getValues.qgis_resamp_europe_avrge. ~ rsmpl_df_subsample$getValues.r300m_resampled1km_Aggr.,
type = c("p", "r"),
col.line = "red",
xlab = "1km resampled DMP image (R)",
ylab = "1km resampled DMP image (QGIS)",
main = paste0("Pearson's r = ", as.character(round(rsmpl_df_pearson, 4))),
sub = paste0("Plotting a random subsample of ", num_subsample, " (", perc_subsample, "%) points")
)
dev.off()
# Calculating differences (errors)
rsmpl_df$diff <- abs(rsmpl_df$getValues.r300m_resampled1km_Aggr. - rsmpl_df$getValues.qgis_resamp_europe_avrge.)
rsmpl_df$diff1 <- abs(round(rsmpl_df$getValues.r300m_resampled1km_Aggr., 1) - round(rsmpl_df$getValues.qgis_resamp_europe_avrge., 1))
# Root Mean Square Error (RMSE; the lower, the better)
# In GIS, the RMSD is one measure used to assess the accuracy of spatial analysis and remote sensing.
rmse <- sqrt(mean((rsmpl_df$diff)^2))
comp_results[3, 3] <- rmse
# Mean Absolute Error (MAE; the lower, the better)
mae <- mean(rsmpl_df$diff)
comp_results[3, 4] <- mae
# Saving stuff for the report
stuff2save <- c("comp_results", "my_extent", "img_date")
if(date == "may19"){
save(list = stuff2save, file = paste0(path2save, "/ResampleResults_dmp_europe_4Report_May19.RData"))
}else if(date == "august18"){
save(list = stuff2save, file = paste0(path2save, "/ResampleResults_dmp_europe_4Report.RData"))
}
comp_results[, 2:4] <- round(comp_results[, 2:4], 5)
write.csv(comp_results, "comp_results.csv")
comp_results
rm(list = ls())
if(Sys.info()[4] == "D01RI1700371"){
path2data <- "E:/rotllxa/NDVI_resample/NDVI_data"
path2save <- "E:/rotllxa/NDVI_resample/"
}else if(Sys.info()[4] == "h05-wad.ies.jrc.it"){
path2data <- ""
path2save <- ""
}else if(Sys.info()[4] == "MacBook-MacBook-Pro-de-Xavier.local"){
path2data <- "/Users/xavi_rp/Documents/D6_LPD/NDVI_data"
path2save <- "/Users/xavi_rp/Documents/D6_LPD/NDVI_resample/DMP_resample_WAfrica"
}else{
stop("Define your machine before to run LPD")
}
setwd(path2save)
nc_file300m <- paste0(path2data, "/dmp300_v1_333m/dmp300_v1_333m_c_gls_DMP300-RT5_201808100000_GLOBE_PROBAV_V1.0.1.nc")
dmp_1km_orig <- paste0(path2data, "/dmp_v2_1km/dmp_v2_1km_c_gls_DMP-RT6_201808100000_GLOBE_PROBAV_V2.0.1.nc")
my_extent <- extent(-17.6, 16.3, 1.5, 23.6)
# Checking correspondence with 1km PROBA-V products
# The following vectors contain Long and Lat coordinates, respectively, of the 1km grid (cell boundaries):
x_ext <- seq((-180 - ((1 / 112) / 2)), 180, (1/112))
y_ext <- seq((80 + ((1 / 112) / 2)), - 60, - (1/112))
if(!all(round(my_extent[1], 7) %in% round(x_ext, 7) &
round(my_extent[2], 7) %in% round(x_ext, 7) &
round(my_extent[3], 7) %in% round(y_ext, 7) &
round(my_extent[4], 7) %in% round(y_ext, 7))){
# The given extent from raster or coordinate vector does not fit into the 1km PROBA-V grid, so we are going to adjust it
for(crd in 1:length(as.vector(my_extent))){
if(crd <= 2){
my_extent[crd] <- x_ext[order(abs(x_ext - my_extent[crd]))][1]
}else{
my_extent[crd] <- y_ext[order(abs(y_ext - my_extent[crd]))][1]
}
}
print("'my_extent' coordinates have been adjusted")
}
as.vector(my_extent)
dmp_1km_orig <- raster(dmp_1km_orig)
img_date <- dmp_1km_orig@z[[1]]
dmp_1km_orig_extnt <- extent(dmp_1km_orig)
if(all(round(dmp_1km_orig_extnt[1], 7) %in% round(x_ext, 7) &
round(dmp_1km_orig_extnt[2], 7) %in% round(x_ext, 7) &
round(dmp_1km_orig_extnt[3], 7) %in% round(y_ext, 7) &
round(dmp_1km_orig_extnt[4], 7) %in% round(y_ext, 7))){
print("dmp_1km_orig extent matches PROBA-V products")
}else{
stop("dmp_1km_orig extent does NOT match PROBA-V products!!!")
}
#cropping to Western Africa
dmp_1km_orig_WAfr <- crop(dmp_1km_orig, my_extent)
dmp1km_rstr <- dmp_1km_orig_WAfr
cuttoff_NA_err <- 327.6700000001  # everything > cuttoff_NA_err, must be removed for the calculations
cuttoff_NA_err <- 327.669993  # everything > cuttoff_NA_err, must be removed for the calculations
cuttoff_NA_err_min <- -0.00000001  # everything <= cuttoff_NA_err_min, must be removed for the calculations
# 1km product
dmp1km_rstr[dmp1km_rstr > cuttoff_NA_err] <- NA   # setting to NA
dmp1km_rstr[dmp1km_rstr < cuttoff_NA_err_min] <- NA   # setting to NA
r300m_resampled1km_Aggr <- raster('r300m_resampled1km_Aggr.tif')
# Plotting correlation (scatterplot)
perc_subsample <- 1   # percentage of points for plotting
load(paste0(path2save, "/ResampleResults_dmp_wafrica_4Report.RData"), verbose = TRUE)
comp_results
## Comparison 'original-1km' with '300m-resampled-1km-QGIS_Aggr' ####
qgis_resamp_wafrica_avrge <- paste0(path2data, "/QGIS_CGLT_20180810/dmp_2018.tif")
qgis_resamp_wafrica_avrge <- raster(qgis_resamp_wafrica_avrge)
qgis_extent <- extent(qgis_resamp_wafrica_avrge)
# Checking correspondence with 1km PROBA-V products
# The following vectors contain Long and Lat coordinates, respectively, of the 1km grid (cell boundaries):
x_ext <- seq((-180 - ((1 / 112) / 2)), 180, (1/112))
y_ext <- seq((80 + ((1 / 112) / 2)), - 60, - (1/112))
if(all(round(qgis_extent[1], 7) %in% round(x_ext, 7) &
round(qgis_extent[2], 7) %in% round(x_ext, 7) &
round(qgis_extent[3], 7) %in% round(y_ext, 7) &
round(qgis_extent[4], 7) %in% round(y_ext, 7))){
print("qgis_resamp_wafrica_avrge extent matches PROBA-V products")
}else{
stop("qgis_resamp_wafrica_avrge extent does NOT match PROBA-V products!!!")
}
# Cropping 'qgis_resamp_wafrica_avrge'
qgis_resamp_wafrica_avrge <- crop(qgis_resamp_wafrica_avrge, my_extent)
qgis_resamp_wafrica_avrge
if(all(round(extent(qgis_resamp_wafrica_avrge)[1], 7) %in% round(x_ext, 7) &
round(extent(qgis_resamp_wafrica_avrge)[2], 7) %in% round(x_ext, 7) &
round(extent(qgis_resamp_wafrica_avrge)[3], 7) %in% round(y_ext, 7) &
round(extent(qgis_resamp_wafrica_avrge)[4], 7) %in% round(y_ext, 7))){
print("qgis_resamp_wafrica_avrge extent matches PROBA-V products")
}else{
stop("qgis_resamp_wafrica_avrge extent does NOT match PROBA-V products!!!")
}
comp_results[2, 1] <- "orig-1km__resampl-1km-QGIS-Aggreg"
rsmpl_df <- data.frame(getValues(dmp1km_rstr), getValues(qgis_resamp_wafrica_avrge))
rsmpl_df <- rsmpl_df[complete.cases(rsmpl_df), 1:2]
# Pearson's correlation coefficient
rsmpl_df_pearson <- cor(rsmpl_df, method = "pearson")[2, 1]
comp_results[2, 2] <- rsmpl_df_pearson
# Plotting correlation (scatterplot)
#perc_subsample <- 1   # percentage of points for plotting
num_subsample <- round((nrow(rsmpl_df) * perc_subsample / 100), 0)
rsmpl_df_subsample <- rsmpl_df[sample(nrow(rsmpl_df), num_subsample), ]
jpeg(paste0(path2save, "/resample_correlation_QGISAggr.jpg"))
xyplot(rsmpl_df_subsample$getValues.qgis_resamp_wafrica_avrge. ~ rsmpl_df_subsample$getValues.dmp1km_rstr.,
type = c("p", "r"),
col.line = "red",
xlab = "1km original DMP product",
ylab = "1km resampled DMP image (QGIS)",
main = paste0("Pearson's r = ", as.character(round(rsmpl_df_pearson, 4))),
sub = paste0("Plotting a random subsample of ", num_subsample, " (", perc_subsample, "%) points")
)
dev.off()
# Calculating differences (errors)
rsmpl_df$diff <- abs(rsmpl_df$getValues.dmp1km_rstr. - rsmpl_df$getValues.qgis_resamp_wafrica_avrge.)
rsmpl_df$diff1 <- abs(round(rsmpl_df$getValues.dmp1km_rstr., 1) - round(rsmpl_df$getValues.qgis_resamp_wafrica_avrge., 1))
# Root Mean Square Error (RMSE; the lower, the better)
# In GIS, the RMSD is one measure used to assess the accuracy of spatial analysis and remote sensing.
rmse <- sqrt(mean((rsmpl_df$diff)^2))
comp_results[2, 3] <- rmse
# Mean Absolute Error (MAE; the lower, the better)
mae <- mean(rsmpl_df$diff)
comp_results[2, 4] <- mae
# plotting original-1km + resampled-1km
jpeg(paste0(path2save, "/dmp1km_1kmResampled_QGISAggr.jpg"),
width = 22, height = 14, units = "cm", res = 300)
par(mfrow = c(1, 2), mar = c(4, 4, 4, 5))
plot(dmp1km_rstr, main = "DMP 1km (original)")
plot(qgis_resamp_wafrica_avrge, main = "DMP 1km (resampled)")
dev.off()
## Comparison '300m-resampled-1km-R_Aggr' with '300m-resampled-1km-QGIS_Aggr' ####
comp_results[3, 1] <- "resampl-1km-R-Aggreg__resampl-1km-QGIS-Aggreg"
rsmpl_df <- data.frame(getValues(r300m_resampled1km_Aggr), getValues(qgis_resamp_wafrica_avrge))
rsmpl_df <- rsmpl_df[complete.cases(rsmpl_df), 1:2]
# Pearson's correlation coefficient
rsmpl_df_pearson <- cor(rsmpl_df, method = "pearson")[2, 1]
comp_results[3, 2] <- rsmpl_df_pearson
# Plotting correlation (scatterplot)
#perc_subsample <- 1   # percentage of points for plotting
num_subsample <- round((nrow(rsmpl_df) * perc_subsample / 100), 0)
rsmpl_df_subsample <- rsmpl_df[sample(nrow(rsmpl_df), num_subsample), ]
jpeg(paste0(path2save, "/resample_correlation_R_QGIS_Aggr.jpg"))
xyplot(rsmpl_df_subsample$getValues.qgis_resamp_wafrica_avrge. ~ rsmpl_df_subsample$getValues.r300m_resampled1km_Aggr.,
type = c("p", "r"),
col.line = "red",
xlab = "1km resampled DMP image (R)",
ylab = "1km resampled DMP image (QGIS)",
main = paste0("Pearson's r = ", as.character(round(rsmpl_df_pearson, 4))),
sub = paste0("Plotting a random subsample of ", num_subsample, " (", perc_subsample, "%) points")
)
dev.off()
# Calculating differences (errors)
rsmpl_df$diff <- abs(rsmpl_df$getValues.r300m_resampled1km_Aggr. - rsmpl_df$getValues.qgis_resamp_wafrica_avrge.)
rsmpl_df$diff1 <- abs(round(rsmpl_df$getValues.r300m_resampled1km_Aggr., 1) - round(rsmpl_df$getValues.qgis_resamp_wafrica_avrge., 1))
# Root Mean Square Error (RMSE; the lower, the better)
# In GIS, the RMSD is one measure used to assess the accuracy of spatial analysis and remote sensing.
rmse <- sqrt(mean((rsmpl_df$diff)^2))
comp_results[3, 3] <- rmse
# Mean Absolute Error (MAE; the lower, the better)
mae <- mean(rsmpl_df$diff)
comp_results[3, 4] <- mae
# Saving stuff for the report
stuff2save <- c("comp_results", "my_extent", "img_date")
save(list = stuff2save, file = paste0(path2save, "/ResampleResults_dmp_wafrica_4Report.RData"))
comp_results[, 2:4] <- round(comp_results[, 2:4], 5)
write.csv(comp_results, "comp_results.csv")
write.csv(comp_results, "comp_results.csv")
comp_results
if(Sys.info()[4] == "D01RI1700371"){
path2data <- "E:/rotllxa/NDVI_resample/NDVI_data"
path2save <- "E:/rotllxa/NDVI_resample/NDVI_resample_Europe"
}else if(Sys.info()[4] == "h05-wad.ies.jrc.it"){
path2data <- ""
path2save <- ""
}else if(Sys.info()[4] == "MacBook-MacBook-Pro-de-Xavier.local"){
path2data <- "/Users/xavi_rp/Documents/D6_LPD/NDVI_data"
path2save <- "/Users/xavi_rp/Documents/D6_LPD/NDVI_resample/NDVI_resample_Europe"
}else{
stop("Define your machine before to run LPD")
}
setwd(path2save)
nc_file300m <- paste0(path2data, "/ndvi300_v1_333m/ndvi300_v1_333m_c_gls_NDVI300_201905010000_GLOBE_PROBAV_V1.0.1.nc")
nc_open(nc_file300m)
kk <- c(0.548,	0.54,	0.508, 0.372, 0.412,	0.44, 0.268, 0.396,	0.48)
mean(kk)
scale <- 0.00400000018998981
offset <- -0.0799999982118607
(0.4404444 - offset)/scale
kk1 <- c(157,	155,	147, 113,	123,	130, 87,	119,	140)
mean(kk1)
(130.1111 * scale) + offset
(kk1 * scale) + offset
scale <- 0.004
offset <- -0.08
(kk1 * scale) + offset
mean((kk1 * scale) + offset)
mean(kk1)
(0.44 - offset)/scale
scale <- 0.00400000018998981
offset <- -0.0799999982118607
(0.44 - offset)/scale
kk1 <- c(157,	155,	147, 113,	123,	130, 87,	119,	140)
mean((kk1 * scale) + offset)
(kk1 * scale) + offset)
(kk1 * scale) + offset
scale <- 0.00400000018998981
offset <- -0.0799999982118607
(kk1 * scale) + offset
scale <- 0.004
offset <- -0.08
mean((kk1 * scale) + offset)
(kk1 * scale) + offset
mean(round(kk1, 3))
mean(round(kk1, 2))
round(mean(kk1), 2)
round(mean(kk), 2)
(0.44 - offset)/scale
round(mean(kk), 3)
rm(list = ls())
.rs.restartR()
## Settings
#rm(list = ls())
#.rs.restartR()
library(ncdf4)
library(fields)
library(raster)
library(rgdal)
library(lattice)
library(sf)
if(Sys.info()[4] == "D01RI1700371"){
path2data <- "E:/rotllxa/NDVI_resample/NDVI_data"
path2save <- "E:/rotllxa/NDVI_resample/NDVI_resample_Europe"
}else if(Sys.info()[4] == "h05-wad.ies.jrc.it"){
path2data <- ""
path2save <- ""
}else if(Sys.info()[4] == "MacBook-MacBook-Pro-de-Xavier.local"){
path2data <- "/Users/xavi_rp/Documents/D6_LPD/NDVI_data"
path2save <- "/Users/xavi_rp/Documents/D6_LPD/NDVI_resample/NDVI_resample_Europe"
}else{
stop("Define your machine before to run LPD")
}
setwd(path2save)
nc_file300m <- paste0(path2data, "/ndvi300_v1_333m/ndvi300_v1_333m_c_gls_NDVI300_201905010000_GLOBE_PROBAV_V1.0.1.nc")
qgis_resamp_europe_avrge <- paste0(path2data, "/01052019_resampled.tif")
qgis_resamp_europe_avrge <- paste0(path2data, "/c_gls_NDVI300_201905010000_GLOBE_PROBAV_V1.0.1.nc.tif")
qgis_resamp_europe_avrge <- paste0(path2data, "/finale_algoritmo_compress.tif")
qgis_resamp_europe_avrge <- paste0(path2data, "/QGIS_CGLT/ndvi.tif")
ndvi_1km_orig <- paste0(path2data, "/ndvi_v2_1km/ndvi_v2_1km_c_gls_NDVI_201905010000_GLOBE_PROBAV_V2.2.1.nc")
qgis_resamp_europe_avrge <- raster(qgis_resamp_europe_avrge)
#qgis_resamp_europe_avrge <- projectRaster(from = qgis_resamp_europe_avrge,
#                                          res = (1/112),
#                                          crs = CRS('+init=EPSG:4326'),
#                                          method="bilinear",
#                                          alignOnly=FALSE, over=FALSE,
#                                          filename="")
#qgis_resamp_europe_avrge
#
qgis_extent <- extent(qgis_resamp_europe_avrge)
# Checking correspondence with 1km PROBA-V products
# The following vectors contain Long and Lat coordinates, respectively, of the 1km grid (cell boundaries):
x_ext <- seq((-180 - ((1 / 112) / 2)), 180, (1/112))
y_ext <- seq((80 + ((1 / 112) / 2)), - 60, - (1/112))
if(all(round(qgis_extent[1], 7) %in% round(x_ext, 7) &
round(qgis_extent[2], 7) %in% round(x_ext, 7) &
round(qgis_extent[3], 7) %in% round(y_ext, 7) &
round(qgis_extent[4], 7) %in% round(y_ext, 7))){
print("qgis_resamp_europe_avrge extent matches PROBA-V products")
}else{
stop("qgis_resamp_europe_avrge extent does NOT match PROBA-V products!!!")
}
#  # The given extent from raster or coordinate vector does not fit into the 1km PROBA-V grid, so we are going to adjust it
#  for(crd in 1:length(as.vector(qgis_extent))){
#    if(crd <= 2){
#      qgis_extent[crd] <- x_ext[order(abs(x_ext - qgis_extent[crd]))][1]
#    }else{
#      qgis_extent[crd] <- y_ext[order(abs(y_ext - qgis_extent[crd]))][1]
#    }
#  }
#  print("'qgis_extent' coordinates have been adjusted")
#}
as.vector(qgis_extent)
# Extent Europe/North Africa
kk <- raster(paste0("/Users/xavi_rp/Documents/D6_LPD/NDVI_resample/NDVI_resample_Europe", "/r300m_resampled1km_Aggr.tif"))
my_extent <- extent(kk)
if(any(res(kk) != res(qgis_resamp_europe_avrge))){
stop("There's a problem with pixel's size!!!")
}
# Cropping 'qgis_resamp_europe_avrge'
qgis_resamp_europe_avrge <- crop(qgis_resamp_europe_avrge, my_extent)
qgis_resamp_europe_avrge
if(all(round(extent(qgis_resamp_europe_avrge)[1], 7) %in% round(x_ext, 7) &
round(extent(qgis_resamp_europe_avrge)[2], 7) %in% round(x_ext, 7) &
round(extent(qgis_resamp_europe_avrge)[3], 7) %in% round(y_ext, 7) &
round(extent(qgis_resamp_europe_avrge)[4], 7) %in% round(y_ext, 7))){
print("qgis_resamp_europe_avrge extent matches PROBA-V products")
}else{
stop("qgis_resamp_europe_avrge extent does NOT match PROBA-V products!!!")
}
## Reading in data 1km global ####
ndvi_1km_orig <- raster(ndvi_1km_orig)
img_date <- ndvi_1km_orig@z[[1]]
ndvi_1km_orig_extnt <- extent(ndvi_1km_orig)
if(all(round(ndvi_1km_orig_extnt[1], 7) %in% round(x_ext, 7) &
round(ndvi_1km_orig_extnt[2], 7) %in% round(x_ext, 7) &
round(ndvi_1km_orig_extnt[3], 7) %in% round(y_ext, 7) &
round(ndvi_1km_orig_extnt[4], 7) %in% round(y_ext, 7))){
print("ndvi_1km_orig extent matches PROBA-V products")
}else{
stop("ndvi_1km_orig extent does NOT match PROBA-V products!!!")
}
# Reading Digital Numbers
avoid_this <- "yes"
avoid_this <- "no"
avoid_this != "yes"
# Reading Digital Numbers
avoid_this <- "yes"
avoid_this != "yes"
specific.filename <- paste0(path2data, "/ndvi_v2_1km/ndvi_v2_1km_c_gls_NDVI_201905010000_GLOBE_PROBAV_V2.2.1.nc")
nc  <- nc_open(specific.filename)
nc
nc  <- nc_open(specific.filename)
lon <- ncvar_get(nc, "lon")
lat <- ncvar_get(nc, "lat")
time <- ncvar_get(nc, "time")
head(time)
nc_data <- ncvar_get(nc, "pet")
nc_data <- ncvar_get(nc, "ndvi")
nc_data <- ncvar_get(nc, "NDVI")
head(nc_data)
dim(nc_data)
nc_data[1,1]
nc_data[10000,10000]
nc_data[100000,100000]
nc_data[20000,1x0000]
nc_data[20000, 10000]
nc_data[20000, 7000]
nc_data <- ncvar_get(nc, "NDVI", raw_datavals = TRUE)
nc_data[20000, 7000]
str(nc_data)
is.matrix(nc_data)
ndvi_1km_orig <- raster(nc_data)
ndvi_1km_orig
raster(specific.filename)
dim(nc_data)[2]
head(seq(dim(nc_data)[2], 1, -1))
tail(seq(dim(nc_data)[2], 1, -1))
ndvi_1km_orig <- raster(t(nc_data[, seq(dim(nc_data)[2], 1, -1)]))
ndvi_1km_orig
raster(specific.filename)
extent(ndvi_1km_orig) <- c(range(lon)[1], (range(lon)[2] + (1/112)),
(range(lat)[1] - (1/112)), range(lat)[2])
crs(ndvi_1km_orig) <- CRS('+init=EPSG:4326')
ndvi_1km_orig
raster(specific.filename)
range(lon)[1]
head(lon)
#Copernicus nc files have lat/long belonging to the centre of the pixel, and R uses upper/left corner --> adjust coordinates!
lon <- lon - (1/112)/2
lat <- lat + (1/112)/2
range(lon)[1]
ndvi_1km_orig <- raster(t(nc_data[, seq(dim(nc_data)[2], 1, -1)]))
extent(ndvi_1km_orig) <- c(range(lon)[1], (range(lon)[2] + (1/112)),
(range(lat)[1] - (1/112)), range(lat)[2])
crs(ndvi_1km_orig) <- CRS('+init=EPSG:4326')
ndvi_1km_orig
raster(specific.filename)
#cropping to Europe
ndvi_1km_orig_Eur <- crop(ndvi_1km_orig, my_extent)
as.vector(extent(my_extent))
as.vector(extent(ndvi_1km_orig_Eur))
jpeg(paste0(path2save, "/ndvi_1km_orig_Eur.jpg"))
plot(ndvi_1km_orig_Eur)
dev.off()
ndvi1km_rstr <- ndvi_1km_orig_Eur
specific.filename300 <- paste0(path2data, "/ndvi300_v1_333m/ndvi300_v1_333m_c_gls_NDVI300_201905010000_GLOBE_PROBAV_V1.0.1.nc")
nc_file300m
## Reading in data 300m ####
specific.filename300 <- nc_file300m
ndvi_300m_orig <- raster(nc_file300m)
ndvi_300m_orig_extnt <- extent(ndvi_300m_orig)
nc  <- nc_open(specific.filename300)
lon <- ncvar_get(nc, "lon")
lat <- ncvar_get(nc, "lat")
time <- ncvar_get(nc, "time")
nc
112*3
#time <- ncvar_get(nc, "time")
#Copernicus nc files have lat/long belonging to the centre of the pixel, and R uses upper/left corner --> adjust coordinates!
lon <- lon - (1/336)/2
lat <- lat + (1/336)/2
nc_data <- ncvar_get(nc, "NDVI", raw_datavals = TRUE)
dim(nc_data)
ndvi_300m_orig
specific.filename
